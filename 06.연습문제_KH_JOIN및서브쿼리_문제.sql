-- KH_연습문제
-- 1. 2020년 12월 25일의 요일 조회
SELECT TO_CHAR(TO_DATE(20201225), 'DAY')
FROM DUAL;

-- 2. 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 이름과, 주민번호, 부서명, 직급 조회
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE E, DEPARTMENT, JOB J
WHERE E.JOB_CODE = J.JOB_CODE AND DEPT_CODE = DEPT_ID
  AND EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO,1,2), 'RRRR')) BETWEEN 1970 AND 1979
  AND SUBSTR(EMP_NO,8,1) = '2' AND EMP_NAME LIKE '전%';

-- 3. 나이가 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회
SELECT ROWNUM, E.*
FROM (SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME,
        EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO,1,2), 'RRRR')) 나이
        FROM EMPLOYEE
        JOIN JOB USING(JOB_CODE)
        JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
        ORDER BY (나이)) E
WHERE ROWNUM <= 1;

-- 4. 이름에 ‘하’이 들어가는 사원의 사원 코드, 사원 명, 직급 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE EMP_NAME LIKE '_%하%';

-- 5. 부서 코드가 D5이거나 D6인 사원의 사원 명, 직급, 부서 코드, 부서 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
WHERE DEPT_CODE IN('D5','D6');

-- 6. 보너스를 받는 사원의 사원 명, 보너스, 부서 명, 지역 명 조회
SELECT EMP_NAME, BONUS, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NOT NULL;

-- 7. 사원 명, 직급, 부서 명, 지역 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
JOIN JOB USING(JOB_CODE);

-- 8. 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회 
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING(NATIONAL_CODE)
WHERE NATIONAL_NAME IN ('한국','일본');

-- 9. 한 사원과 같은 부서에서 일하는 사원의 이름 조회
SELECT EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE DEPT_CODE = (SELECT DEPT_CODE
                    FROM EMPLOYEE
                    WHERE EMP_NAME = '김정보');

-- 10. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급, 급여 조회 (NVL 이용)
SELECT EMP_NAME, JOB_CODE, SALARY, NVL(BONUS,0)
FROM EMPLOYEE
WHERE JOB_CODE IN('J4','J7')
  AND BONUS IS NULL;

-- 11. 퇴사 하지 않은 사람과 퇴사한 사람의 수 조회
SELECT COUNT(DECODE(END_DATE, NULL, 1)) "재직자 수"
     , COUNT(*)-COUNT(DECODE(END_DATE, NULL, 1)) "퇴사자 수"
FROM EMPLOYEE;

-- 12. 보너스 포함한 연봉이 높은 5명의 사번, 이름, 부서 명, 직급, 입사일, 순위 조회
SELECT * 
FROM(SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_CODE, HIRE_DATE, SALARY*(1+NVL(BONUS,0))*12 연봉
    , RANK() OVER(ORDER BY SALARY*(1+NVL(BONUS,0))*12 DESC) 순위
        FROM EMPLOYEE
        JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID))
WHERE 순위 <= 5;

-- 13. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서 명, 부서 별 급여 합계 조회
--	13-1. JOIN과 HAVING 사용
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > SUM(SUM(SALARY))*0.2;

--	13-2. 인라인 뷰 사용
SELECT D.DEPT_TITLE, SUM(SALARY)
FROM (SELECT SUM(SALARY)
        FROM EMPLOYEE E)
JOIN DEPARTMENT D ON(E.DEPT_CODE = D.DEPT_ID)
GROUP BY DEPT_TITLE;

--	13-3. WITH 사용
-- 14. 부서 명과 부서 별 급여 합계 조회
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;

-- 15. WITH를 이용하여 급여 합과 급여 평균 조회